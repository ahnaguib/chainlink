package vrf

import (
	"crypto/rsa"
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"
)

func panicErr(err error) {
	if err != nil {
		panic(err)
	}
}

func TestVRF_safePrime(t *testing.T) {
	// Short, because this is slow. Greater than 64+1, because rand.Prime
	// logic changes for smaller bit lengths
	bitLen := 66
	p := safePrime(uint32(bitLen))
	assert.Equal(t, p.BitLen(), bitLen)
}

func bigFromBase10(s string) *big.Int {
	n, _ := new(big.Int).SetString(s, 10)
	return n
}

// fullKey is a full 2048-bit RSA private key. Included here because these are
// slow to generate with MakeKey.
var fullKey = rsa.PrivateKey{
	PublicKey: rsa.PublicKey{
		N: bigFromBase10("2038902705738296652179452979228406046740865" +
			"6886429108723497462797832479859195898518171868092392" +
			"4813899116500122895552937519666912751813257280250790" +
			"3471252249299755577926731144593106800157493645359156" +
			"5718775535563215028524908377199931590996387403377740" +
			"8902409283000457008905665784259981864975729722750202" +
			"1840568750641770574021947895778970789737197233162205" +
			"1893166250244960078177554184043472238054587552908893" +
			"8834016392062485298632477489226580677665792092403245" +
			"9869892127591085718091649945122745686247499394876690" +
			"0344856185427796669697590011002263996952134790306121" +
			"5228573249068185471921409381282695215999821632511709" +
			"73"),
		E: 3,
	},
	D: bigFromBase10("135926847049219776811963531948560403116057712576194" +
		"058156649751985549865727972656787812453949283209266077666748" +
		"597035291679777941834542171520167193564750149953317038528448" +
		"742972873786677166243023943771458503570421433523499389181332" +
		"877273309249355851605934939522000304672603777189506654576650" +
		"486481833468122702679346908076666408411374028985983440109864" +
		"523474602442657206676394573820808407104008767768380777688345" +
		"970526263815047867768433752902071805254630524844568916929005" +
		"794813568356755945411983949767656940348725579513539753047621" +
		"042039704331965852257307588064942882721520209213252566279074" +
		"75865902989773661625068819"),
	Primes: []*big.Int{
		bigFromBase10("1409478378157946772483812141208670071902585609" +
			"1633807131709748674447762620658147678726781145853629" +
			"0325254803644459359446813801591789029985270010702202" +
			"7239001991444181018959158525075642575864229937245426" +
			"0944412444217554530213012159615587820949096927718102" +
			"3188799842962090570036566784203918440597582503448115" +
			"339"),
		bigFromBase10("1446565436784455809688704712391328487655933826" +
			"1436472853456647187451385485620092984947161083725595" +
			"0306251256622216913236268682267933727010521003959395" +
			"1894611827806235332497471335518514016835868516831719" +
			"8206380471228929422441116245919659090962256937491535" +
			"6901649253913345989270632292710552226517739167365452" +
			"407"),
	},
	Precomputed: rsa.PrecomputedValues{
		Dp: bigFromBase10("939652252105297848322541427472446714601723" +
			"7394422538087806499116298508413772098452484520763902" +
			"4193550169869096306239631209201061192686656846673801" +
			"4684826001327629454012639439016717095050576153291496" +
			"9507296274962811703020142008106410391880632731285145" +
			"4015459199895308060380024377856135945627065055002298" +
			"743559"),
		Dq: bigFromBase10("964376957856303873125803141594218991770622" +
			"5507624315235637764791634256990413395323298107389150" +
			"3966870834171081477942157512454845289151340347335972" +
			"9301263074551870823554998314223679009344557245677887" +
			"8132137586980819286281627410830613106060641504624994" +
			"3571267766169275563992847088195140368151011826111576" +
			"968271"),
		Qinv: bigFromBase10("4606488692971732709178231708520639778553" +
			"9210356883508018662461922269899862517292333002762408" +
			"1744751612996043252829697391984815179678303947180869" +
			"7051201013903590741976127376600492015378124755064621" +
			"8322373561145710892211172028755708097869940318739568" +
			"1198654017118928658097414931696012176933114786480818" +
			"66658468"),
		CRTValues: nil,
	},
}

func testKey(t *testing.T, k *rsa.PrivateKey) {
	proof, err := Generate(k, big.NewInt(1))
	panicErr(err)
	ok, err := proof.Verify()
	panicErr(err)
	assert.True(t, ok, "rejected a valid key")
	proof.Seed = big.NewInt(2)
	ok, err = proof.Verify()
	panicErr(err)
	assert.False(t, ok, "accepted an invalid key")
}

func TestVRF_fullKey(t *testing.T) {
	testKey(t, &fullKey)
}

func TestVRF_Generate(t *testing.T) {
	k, err := MakeKey(150) // Make a short key, to speed testing.
	panicErr(err)
	testKey(t, k)
}
